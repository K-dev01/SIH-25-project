
import React, { useState, useEffect, useCallback } from "react";
import { User } from "@/entities/User";
import { UserProfile } from "@/entities/UserProfile";
import { Course } from "@/entities/Course";
import { QuizResult } from "@/entities/QuizResult";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Link, useLocation } from "react-router-dom";
import { createPageUrl } from "@/utils";
import { useToast } from "@/components/ui/use-toast";
import { 
  BookOpen, 
  Search, 
  Filter, 
  GraduationCap, 
  Clock, 
  DollarSign, 
  Target,
  ExternalLink,
  CheckCircle,
  ArrowRight
} from "lucide-react";

import CourseCard from "../components/courses/CourseCard";
import CourseFilters from "../components/courses/CourseFilters";

export default function CourseExploration() {
  const [user, setUser] = useState(null);
  const [userProfile, setUserProfile] = useState(null);
  const [courses, setCourses] = useState([]);
  const [filteredCourses, setFilteredCourses] = useState([]);
  const [quizResults, setQuizResults] = useState(null);
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState("");
  const [filters, setFilters] = useState({
    stream: "all",
    level: "all",
    duration: "all"
  });
  
  const location = useLocation();
  const { toast } = useToast();

  const handleVoiceSearch = useCallback((command) => {
    const streamKeywords = ['science', 'engineering', 'medical', 'arts', 'commerce', 'vocational'];
    const searchRegex = /search for (.*) courses|find (.*) courses/;
    const searchMatch = command.match(searchRegex);
    
    if (searchMatch) {
      const query = searchMatch[1] || searchMatch[2];
      const foundStream = streamKeywords.find(s => query.includes(s));
      
      if (foundStream) {
        setFilters(prev => ({...prev, stream: foundStream}));
        toast({ title: "Voice Search", description: `Filtering for ${foundStream} courses.` });
      } else {
        setSearchTerm(query);
        toast({ title: "Voice Search", description: `Searching for "${query}".` });
      }
    }
  }, [toast, setFilters, setSearchTerm]);

  useEffect(() => {
    const voiceCommand = location.state?.voiceCommand;
    if (voiceCommand) {
      handleVoiceSearch(voiceCommand);
    }
  }, [location.state, handleVoiceSearch]);

  useEffect(() => {
    loadData();
  }, []);

  useEffect(() => {
    const filterCourses = () => {
      let filtered = [...courses];
      
      // Search filter
      if (searchTerm) {
        filtered = filtered.filter(course => 
          course.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
          course.description.toLowerCase().includes(searchTerm.toLowerCase())
        );
      }
      
      // Stream filter
      if (filters.stream !== "all") {
        filtered = filtered.filter(course => course.stream === filters.stream);
      }
      
      // Level filter
      if (filters.level !== "all") {
        filtered = filtered.filter(course => course.level === filters.level);
      }
      
      // Duration filter
      if (filters.duration !== "all") {
        filtered = filtered.filter(course => course.duration.includes(filters.duration));
      }
      
      // Prioritize recommended courses if quiz completed
      if (quizResults && quizResults.recommended_streams) {
        const streamMap = {
          'Science': 'science',
          'Arts/Humanities': 'arts', 
          'Commerce': 'commerce',
          'Engineering/Technology': 'engineering',
          'Social Sciences': 'social_service'
        };
        
        const recommendedStreams = quizResults.recommended_streams.map(stream => streamMap[stream]).filter(Boolean);
        
        filtered.sort((a, b) => {
          const aRecommended = recommendedStreams.includes(a.stream);
          const bRecommended = recommendedStreams.includes(b.stream);
          if (aRecommended && !bRecommended) return -1;
          if (!aRecommended && bRecommended) return 1;
          return 0;
        });
      }
      
      setFilteredCourses(filtered);
    };

    filterCourses();
  }, [courses, searchTerm, filters, quizResults]);

  const loadData = async () => {
    try {
      const currentUser = await User.me();
      setUser(currentUser);
      
      const profiles = await UserProfile.filter({created_by: currentUser.email});
      if (profiles.length === 0) {
        window.location.href = createPageUrl("ProfileSetup");
        return;
      }
      
      const profile = profiles[0];
      setUserProfile(profile);
      
      if (profile.quiz_completed) {
        const results = await QuizResult.filter({created_by: currentUser.email}, '-created_date', 1);
        if (results.length > 0) {
          setQuizResults(results[0]);
        }
      }
      
      const allCourses = await Course.list();
      setCourses(allCourses);
      
    } catch (error) {
      await User.loginWithRedirect(window.location.href);
    }
    setLoading(false);
  };

  if (loading) {
    return (
      <div className="p-8 flex items-center justify-center">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
      </div>
    );
  }

  const getRecommendedBadge = (courseStream) => {
    if (!quizResults || !quizResults.recommended_streams) return null;
    
    const streamMap = {
      'science': 'Science',
      'arts': 'Arts/Humanities',
      'commerce': 'Commerce', 
      'engineering': 'Engineering/Technology',
      'medical': 'Science',
      'vocational': 'Engineering/Technology'
    };
    
    const mappedStream = streamMap[courseStream];
    if (quizResults.recommended_streams.includes(mappedStream)) {
      return <Badge className="bg-green-100 text-green-800 border-green-200">Recommended for You</Badge>;
    }
    return null;
  };

  return (
    <div className="p-6 md:p-8 space-y-6">
      {/* Header */}
      <div className="text-center space-y-4">
        <div className="w-16 h-16 bg-gradient-to-r from-blue-600 to-indigo-600 rounded-full flex items-center justify-center mx-auto">
          <BookOpen className="w-8 h-8 text-white" />
        </div>
        <h1 className="text-3xl font-bold bg-gradient-to-r from-blue-600 to-indigo-600 bg-clip-text text-transparent">
          Explore Courses
        </h1>
        <p className="text-gray-600 max-w-2xl mx-auto">
          Discover the perfect course for your interests and career goals. 
          {quizResults && " Courses are personalized based on your interest assessment."}
        </p>
      </div>

      {/* Quiz Recommendation Alert */}
      {!userProfile.quiz_completed && (
        <Card className="border-amber-200 bg-gradient-to-r from-amber-50 to-orange-50">
          <CardContent className="py-4">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-3">
                <Target className="h-5 w-5 text-amber-600" />
                <div>
                  <h3 className="font-semibold text-amber-800">Get Personalized Recommendations</h3>
                  <p className="text-sm text-amber-700">Take our interest quiz to see courses tailored for you!</p>
                </div>
              </div>
              <Link to={createPageUrl("InterestQuiz")}>
                <Button variant="outline" className="border-amber-400 text-amber-700 hover:bg-amber-100">
                  Take Quiz
                  <ArrowRight className="w-4 h-4 ml-2" />
                </Button>
              </Link>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Search and Filters */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Search className="h-5 w-5" />
            Search & Filter Courses
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          {/* Search Bar */}
          <div className="relative">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
            <Input
              placeholder="Search courses by name or description..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="pl-10"
            />
          </div>
          
          {/* Filters */}
          <CourseFilters filters={filters} onFilterChange={setFilters} />
        </CardContent>
      </Card>

      {/* Course Results */}
      <div className="space-y-4">
        <div className="flex justify-between items-center">
          <h2 className="text-xl font-bold text-gray-900">
            Available Courses ({filteredCourses.length})
          </h2>
          {quizResults && (
            <Badge variant="outline" className="bg-blue-50 text-blue-700">
              <CheckCircle className="w-3 h-3 mr-1" />
              Personalized Results
            </Badge>
          )}
        </div>

        {filteredCourses.length === 0 ? (
          <Card>
            <CardContent className="py-12 text-center">
              <BookOpen className="w-12 h-12 text-gray-400 mx-auto mb-4" />
              <h3 className="text-lg font-semibold text-gray-900 mb-2">No Courses Found</h3>
              <p className="text-gray-600 mb-4">Try adjusting your search or filter criteria</p>
              <Button 
                onClick={() => {
                  setSearchTerm("");
                  setFilters({ stream: "all", level: "all", duration: "all" });
                }}
                variant="outline"
              >
                Clear Filters
              </Button>
            </CardContent>
          </Card>
        ) : (
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            {filteredCourses.map((course) => (
              <CourseCard 
                key={course.id} 
                course={course}
                recommendedBadge={getRecommendedBadge(course.stream)}
              />
            ))}
          </div>
        )}
      </div>

      {/* Call to Action */}
      <Card className="border-green-200 bg-gradient-to-r from-green-50 to-emerald-50">
        <CardContent className="py-6 text-center">
          <h3 className="text-lg font-semibold text-green-800 mb-2">Ready to Find Colleges?</h3>
          <p className="text-green-700 mb-4">
            Explore government colleges offering these courses near you
          </p>
          <Link to={createPageUrl("CollegeDirectory")}>
            <Button className="bg-green-600 hover:bg-green-700">
              Find Colleges
              <ArrowRight className="w-4 h-4 ml-2" />
            </Button>
          </Link>
        </CardContent>
      </Card>
    </div>
  );
}
