import React, { useState, useEffect } from "react";
import { User } from "@/entities/User";
import { UserProfile } from "@/entities/UserProfile";
import { QuizResult } from "@/entities/QuizResult";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { Link } from "react-router-dom";
import { createPageUrl } from "@/utils";
import { 
  TrendingUp, 
  Award, 
  Target, 
  Calendar, 
  CheckCircle,
  Clock,
  Star,
  Trophy,
  BookOpen,
  Brain,
  Zap
} from "lucide-react";

export default function ProgressPage() {
  const [user, setUser] = useState(null);
  const [userProfile, setUserProfile] = useState(null);
  const [quizResults, setQuizResults] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    loadData();
  }, []);

  const loadData = async () => {
    try {
      const currentUser = await User.me();
      setUser(currentUser);
      
      const profiles = await UserProfile.filter({created_by: currentUser.email});
      if (profiles.length === 0) {
        window.location.href = createPageUrl("ProfileSetup");
        return;
      }
      
      const profile = profiles[0];
      setUserProfile(profile);
      
      // Load quiz results if available
      if (profile.quiz_completed) {
        const results = await QuizResult.filter({created_by: currentUser.email}, '-created_date', 1);
        if (results.length > 0) {
          setQuizResults(results[0]);
        }
      }
      
    } catch (error) {
      await User.loginWithRedirect(window.location.href);
    }
    setLoading(false);
  };

  const updateStreak = async () => {
    if (!userProfile) return;
    
    const today = new Date().toDateString();
    const lastUpdate = userProfile.last_streak_update;
    
    if (!lastUpdate || lastUpdate !== today) {
      const newStreak = userProfile.learning_streak + 1;
      const newBadges = userProfile.total_badges + (newStreak % 7 === 0 ? 1 : 0); // Badge every 7 days
      
      await UserProfile.update(userProfile.id, {
        learning_streak: newStreak,
        total_badges: newBadges,
        last_streak_update: today
      });
      
      // Reload data to show updated stats
      loadData();
    }
  };

  const getOverallProgress = () => {
    if (!userProfile) return 0;
    let progress = 0;
    
    // Profile completion: 25%
    progress += 25;
    
    // Quiz completion: 50%
    if (userProfile.quiz_completed) progress += 50;
    
    // Onboarding completion: 25%
    if (userProfile.onboarding_completed) progress += 25;
    
    return progress;
  };

  const getBadges = () => {
    const badges = [];
    
    if (userProfile?.quiz_completed) {
      badges.push({ name: "Quiz Master", icon: Brain, color: "bg-purple-100 text-purple-800", description: "Completed interest assessment" });
    }
    
    if (userProfile?.learning_streak >= 7) {
      badges.push({ name: "Weekly Warrior", icon: Calendar, color: "bg-blue-100 text-blue-800", description: "7-day learning streak" });
    }
    
    if (userProfile?.learning_streak >= 30) {
      badges.push({ name: "Monthly Master", icon: Trophy, color: "bg-gold-100 text-gold-800", description: "30-day learning streak" });
    }
    
    if (userProfile?.total_badges >= 5) {
      badges.push({ name: "Achievement Hunter", icon: Star, color: "bg-green-100 text-green-800", description: "Earned 5+ badges" });
    }
    
    return badges;
  };

  const getStreakMessage = () => {
    const streak = userProfile?.learning_streak || 0;
    if (streak === 0) return "Start your learning journey today!";
    if (streak < 7) return `Great start! ${7 - streak} more days to your first badge.`;
    if (streak < 30) return `Excellent consistency! ${30 - streak} more days to monthly master.`;
    return "Outstanding dedication! You're a learning champion!";
  };

  if (loading) {
    return (
      <div className="p-8 flex items-center justify-center">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
      </div>
    );
  }

  const overallProgress = getOverallProgress();
  const badges = getBadges();

  return (
    <div className="p-6 md:p-8 space-y-6">
      {/* Header */}
      <div className="text-center space-y-4">
        <div className="w-16 h-16 bg-gradient-to-r from-blue-600 to-purple-600 rounded-full flex items-center justify-center mx-auto">
          <TrendingUp className="w-8 h-8 text-white" />
        </div>
        <h1 className="text-3xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
          Your Learning Progress
        </h1>
        <p className="text-gray-600 max-w-2xl mx-auto">
          Track your educational journey, celebrate achievements, and stay motivated on your path to success.
        </p>
      </div>

      {/* Progress Overview */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <Card className="border-blue-200 bg-gradient-to-br from-blue-50 to-indigo-50">
          <CardHeader className="flex flex-row items-center justify-between pb-3">
            <CardTitle className="text-sm font-medium text-blue-700">Overall Progress</CardTitle>
            <TrendingUp className="h-5 w-5 text-blue-600" />
          </CardHeader>
          <CardContent>
            <div className="text-3xl font-bold text-blue-900 mb-2">{overallProgress}%</div>
            <Progress value={overallProgress} className="h-2 mb-2" />
            <p className="text-xs text-blue-600">Keep going to reach 100%!</p>
          </CardContent>
        </Card>

        <Card className="border-green-200 bg-gradient-to-br from-green-50 to-emerald-50">
          <CardHeader className="flex flex-row items-center justify-between pb-3">
            <CardTitle className="text-sm font-medium text-green-700">Learning Streak</CardTitle>
            <Zap className="h-5 w-5 text-green-600" />
          </CardHeader>
          <CardContent>
            <div className="text-3xl font-bold text-green-900 mb-2">{userProfile?.learning_streak || 0}</div>
            <p className="text-xs text-green-600">{getStreakMessage()}</p>
            <Button 
              size="sm" 
              className="mt-3 bg-green-600 hover:bg-green-700 text-xs"
              onClick={updateStreak}
            >
              <Clock className="w-3 h-3 mr-1" />
              Update Today's Progress
            </Button>
          </CardContent>
        </Card>

        <Card className="border-purple-200 bg-gradient-to-br from-purple-50 to-pink-50">
          <CardHeader className="flex flex-row items-center justify-between pb-3">
            <CardTitle className="text-sm font-medium text-purple-700">Badges Earned</CardTitle>
            <Award className="h-5 w-5 text-purple-600" />
          </CardHeader>
          <CardContent>
            <div className="text-3xl font-bold text-purple-900 mb-2">{userProfile?.total_badges || 0}</div>
            <p className="text-xs text-purple-600">Collect badges for milestones!</p>
          </CardContent>
        </Card>
      </div>

      {/* Journey Progress */}
      <Card>
        <CardHeader>
          <CardTitle className="text-xl font-bold text-gray-900">Educational Journey Milestones</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {/* Profile Setup */}
            <div className="flex items-center gap-4 p-4 rounded-lg bg-gradient-to-r from-green-50 to-emerald-50 border border-green-200">
              <CheckCircle className="h-6 w-6 text-green-600" />
              <div className="flex-1">
                <h3 className="font-semibold text-green-800">Profile Setup Complete</h3>
                <p className="text-sm text-green-700">Personal information and preferences saved</p>
              </div>
              <Badge className="bg-green-100 text-green-800">✓ Completed</Badge>
            </div>

            {/* Interest Quiz */}
            <div className={`flex items-center gap-4 p-4 rounded-lg border ${
              userProfile?.quiz_completed 
                ? 'bg-gradient-to-r from-green-50 to-emerald-50 border-green-200' 
                : 'bg-gradient-to-r from-amber-50 to-orange-50 border-amber-200'
            }`}>
              {userProfile?.quiz_completed ? (
                <CheckCircle className="h-6 w-6 text-green-600" />
              ) : (
                <Target className="h-6 w-6 text-amber-600" />
              )}
              <div className="flex-1">
                <h3 className={`font-semibold ${userProfile?.quiz_completed ? 'text-green-800' : 'text-amber-800'}`}>
                  Interest Assessment Quiz
                </h3>
                <p className={`text-sm ${userProfile?.quiz_completed ? 'text-green-700' : 'text-amber-700'}`}>
                  {userProfile?.quiz_completed 
                    ? 'Discovered your academic strengths and interests' 
                    : 'Take the quiz to get personalized recommendations'}
                </p>
              </div>
              {userProfile?.quiz_completed ? (
                <Badge className="bg-green-100 text-green-800">✓ Completed</Badge>
              ) : (
                <Link to={createPageUrl("InterestQuiz")}>
                  <Button size="sm" variant="outline" className="border-amber-400 text-amber-700 hover:bg-amber-100">
                    Take Quiz
                  </Button>
                </Link>
              )}
            </div>

            {/* Course Exploration */}
            <div className="flex items-center gap-4 p-4 rounded-lg bg-gray-50 border border-gray-200">
              <BookOpen className="h-6 w-6 text-blue-600" />
              <div className="flex-1">
                <h3 className="font-semibold text-gray-900">Course Exploration</h3>
                <p className="text-sm text-gray-600">Browse and learn about different academic programs</p>
              </div>
              <Link to={createPageUrl("CourseExploration")}>
                <Button size="sm" variant="outline">Explore</Button>
              </Link>
            </div>

            {/* College Search */}
            <div className="flex items-center gap-4 p-4 rounded-lg bg-gray-50 border border-gray-200">
              <TrendingUp className="h-6 w-6 text-purple-600" />
              <div className="flex-1">
                <h3 className="font-semibold text-gray-900">College Directory</h3>
                <p className="text-sm text-gray-600">Find affordable government colleges</p>
              </div>
              <Link to={createPageUrl("CollegeDirectory")}>
                <Button size="sm" variant="outline">Search</Button>
              </Link>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Achievements & Badges */}
      <Card>
        <CardHeader>
          <CardTitle className="text-xl font-bold text-gray-900">Achievements & Badges</CardTitle>
        </CardHeader>
        <CardContent>
          {badges.length > 0 ? (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              {badges.map((badge, index) => (
                <div key={index} className={`p-4 rounded-lg border ${badge.color} border-opacity-50`}>
                  <div className="flex items-center gap-3">
                    <div className="p-2 rounded-lg bg-white bg-opacity-50">
                      <badge.icon className="h-5 w-5" />
                    </div>
                    <div>
                      <h3 className="font-semibold">{badge.name}</h3>
                      <p className="text-xs opacity-75">{badge.description}</p>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          ) : (
            <div className="text-center py-8">
              <Award className="w-12 h-12 text-gray-400 mx-auto mb-4" />
              <h3 className="text-lg font-semibold text-gray-900 mb-2">No Badges Yet</h3>
              <p className="text-gray-600 mb-4">Complete activities to earn your first badge!</p>
              <Link to={createPageUrl("InterestQuiz")}>
                <Button className="bg-blue-600 hover:bg-blue-700">
                  Take Interest Quiz
                </Button>
              </Link>
            </div>
          )}
        </CardContent>
      </Card>

      {/* Quiz Results */}
      {quizResults && (
        <Card>
          <CardHeader>
            <CardTitle className="text-xl font-bold text-gray-900">Your Interest Assessment Results</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              <div className="p-4 bg-purple-50 border border-purple-200 rounded-lg">
                <h3 className="font-semibold text-purple-800 mb-2">Personality Type</h3>
                <p className="text-purple-700">{quizResults.personality_type}</p>
              </div>
              
              <div>
                <h3 className="font-semibold text-gray-900 mb-3">Recommended Streams</h3>
                <div className="flex gap-2 flex-wrap">
                  {quizResults.recommended_streams.map((stream, index) => (
                    <Badge key={index} variant="outline" className={`${index === 0 ? 'bg-blue-100 text-blue-800 border-blue-300' : ''}`}>
                      {stream} {index === 0 && '⭐'}
                    </Badge>
                  ))}
                </div>
              </div>

              <div className="pt-4">
                <Link to={createPageUrl("CourseExploration")}>
                  <Button className="bg-purple-600 hover:bg-purple-700">
                    Explore Recommended Courses
                  </Button>
                </Link>
              </div>
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
}
