import React, { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { 
  Clock, 
  DollarSign, 
  GraduationCap, 
  ExternalLink,
  Award,
  BookOpen,
  Users,
  TrendingUp
} from "lucide-react";
import { Separator } from "@/components/ui/separator";

const streamColors = {
  science: "bg-blue-100 text-blue-800 border-blue-200",
  arts: "bg-purple-100 text-purple-800 border-purple-200", 
  commerce: "bg-green-100 text-green-800 border-green-200",
  engineering: "bg-orange-100 text-orange-800 border-orange-200",
  medical: "bg-red-100 text-red-800 border-red-200",
  vocational: "bg-yellow-100 text-yellow-800 border-yellow-200"
};

export default function CourseCard({ course, recommendedBadge }) {
  const [dialogOpen, setDialogOpen] = useState(false);

  const formatSalary = (salaryRange) => {
    if (!salaryRange) return "Not specified";
    const { min, max, currency = "INR" } = salaryRange;
    const symbol = currency === "INR" ? "â‚¹" : "$";
    return `${symbol}${(min/100000).toFixed(1)}L - ${symbol}${(max/100000).toFixed(1)}L`;
  };

  return (
    <>
      <Card className="hover:shadow-lg transition-all duration-300 border-l-4 border-l-blue-500">
        <CardHeader className="pb-3">
          <div className="flex justify-between items-start">
            <div className="space-y-2">
              <CardTitle className="text-xl text-gray-900">{course.name}</CardTitle>
              <div className="flex gap-2 flex-wrap">
                <Badge className={`${streamColors[course.stream]} border`}>
                  {course.stream.replace('_', ' ').toUpperCase()}
                </Badge>
                <Badge variant="outline" className="capitalize">
                  {course.level}
                </Badge>
                {recommendedBadge}
              </div>
            </div>
            <GraduationCap className="h-6 w-6 text-blue-600" />
          </div>
        </CardHeader>
        <CardContent className="space-y-4">
          <p className="text-gray-600 text-sm leading-relaxed line-clamp-3">
            {course.description}
          </p>
          
          {/* Quick Info */}
          <div className="grid grid-cols-2 gap-4 text-sm">
            <div className="flex items-center gap-2">
              <Clock className="h-4 w-4 text-gray-500" />
              <span>{course.duration}</span>
            </div>
            <div className="flex items-center gap-2">
              <DollarSign className="h-4 w-4 text-gray-500" />
              <span>{formatSalary(course.average_salary)}</span>
            </div>
          </div>

          {/* Career Opportunities Preview */}
          {course.career_opportunities && course.career_opportunities.length > 0 && (
            <div>
              <p className="text-sm font-medium text-gray-700 mb-2">Top Career Paths:</p>
              <div className="flex gap-1 flex-wrap">
                {course.career_opportunities.slice(0, 3).map((career, index) => (
                  <Badge key={index} variant="secondary" className="text-xs">
                    {career}
                  </Badge>
                ))}
                {course.career_opportunities.length > 3 && (
                  <Badge variant="secondary" className="text-xs">
                    +{course.career_opportunities.length - 3} more
                  </Badge>
                )}
              </div>
            </div>
          )}

          <Dialog open={dialogOpen} onOpenChange={setDialogOpen}>
            <DialogTrigger asChild>
              <Button className="w-full bg-blue-600 hover:bg-blue-700">
                View Full Details
                <ExternalLink className="w-4 h-4 ml-2" />
              </Button>
            </DialogTrigger>
            <DialogContent className="max-w-4xl max-h-[80vh] overflow-y-auto">
              <DialogHeader>
                <DialogTitle className="text-2xl text-blue-800">{course.name}</DialogTitle>
                <div className="flex gap-2 mt-2">
                  <Badge className={`${streamColors[course.stream]} border`}>
                    {course.stream.replace('_', ' ').toUpperCase()}
                  </Badge>
                  <Badge variant="outline" className="capitalize">
                    {course.level}
                  </Badge>
                  {recommendedBadge}
                </div>
              </DialogHeader>
              
              <div className="space-y-6 mt-6">
                {/* Overview */}
                <div>
                  <h3 className="text-lg font-semibold mb-3 flex items-center gap-2">
                    <BookOpen className="h-5 w-5 text-blue-600" />
                    Course Overview
                  </h3>
                  <p className="text-gray-700 leading-relaxed">{course.description}</p>
                </div>

                <Separator />

                {/* Key Details Grid */}
                <div className="grid md:grid-cols-2 gap-6">
                  <div>
                    <h4 className="font-semibold text-gray-900 mb-3">Course Information</h4>
                    <div className="space-y-2 text-sm">
                      <div className="flex justify-between">
                        <span className="text-gray-600">Duration:</span>
                        <span className="font-medium">{course.duration}</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-gray-600">Level:</span>
                        <span className="font-medium capitalize">{course.level}</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-gray-600">Stream:</span>
                        <span className="font-medium">{course.stream.replace('_', ' ')}</span>
                      </div>
                    </div>
                  </div>

                  <div>
                    <h4 className="font-semibold text-gray-900 mb-3">Salary Potential</h4>
                    <div className="bg-green-50 border border-green-200 rounded-lg p-3">
                      <div className="flex items-center gap-2 mb-1">
                        <TrendingUp className="h-4 w-4 text-green-600" />
                        <span className="text-sm font-medium text-green-800">Average Salary Range</span>
                      </div>
                      <p className="text-lg font-bold text-green-700">
                        {formatSalary(course.average_salary)}
                      </p>
                      <p className="text-xs text-green-600 mt-1">Per annum in India</p>
                    </div>
                  </div>
                </div>

                <Separator />

                {/* Eligibility */}
                {course.eligibility && (
                  <>
                    <div>
                      <h3 className="text-lg font-semibold mb-3 flex items-center gap-2">
                        <Award className="h-5 w-5 text-blue-600" />
                        Eligibility Criteria
                      </h3>
                      <p className="text-gray-700 bg-blue-50 border border-blue-200 rounded-lg p-3">
                        {course.eligibility}
                      </p>
                    </div>
                    <Separator />
                  </>
                )}

                {/* Career Opportunities */}
                {course.career_opportunities && course.career_opportunities.length > 0 && (
                  <>
                    <div>
                      <h3 className="text-lg font-semibold mb-3 flex items-center gap-2">
                        <Users className="h-5 w-5 text-blue-600" />
                        Career Opportunities
                      </h3>
                      <div className="grid md:grid-cols-2 gap-2">
                        {course.career_opportunities.map((career, index) => (
                          <div key={index} className="flex items-center gap-2 p-2 bg-gray-50 rounded-lg">
                            <div className="w-2 h-2 bg-blue-600 rounded-full"></div>
                            <span className="text-sm text-gray-700">{career}</span>
                          </div>
                        ))}
                      </div>
                    </div>
                    <Separator />
                  </>
                )}

                {/* Entrance Exams */}
                {course.entrance_exams && course.entrance_exams.length > 0 && (
                  <>
                    <div>
                      <h3 className="text-lg font-semibold mb-3">Important Entrance Exams</h3>
                      <div className="space-y-3">
                        {course.entrance_exams.map((exam, index) => (
                          <div key={index} className="border border-gray-200 rounded-lg p-3">
                            <h4 className="font-semibold text-gray-900">{exam.name}</h4>
                            <p className="text-sm text-gray-600">Conducted by: {exam.conducting_body}</p>
                            {exam.exam_dates && (
                              <p className="text-sm text-gray-600">Exam Dates: {exam.exam_dates}</p>
                            )}
                            {exam.website && (
                              <a 
                                href={exam.website} 
                                target="_blank" 
                                rel="noopener noreferrer"
                                className="text-blue-600 hover:text-blue-800 text-sm font-medium inline-flex items-center gap-1 mt-2"
                              >
                                Visit Website <ExternalLink className="h-3 w-3" />
                              </a>
                            )}
                          </div>
                        ))}
                      </div>
                    </div>
                    <Separator />
                  </>
                )}

                {/* Required Skills */}
                {course.required_skills && course.required_skills.length > 0 && (
                  <div>
                    <h3 className="text-lg font-semibold mb-3">Skills You'll Develop</h3>
                    <div className="flex gap-2 flex-wrap">
                      {course.required_skills.map((skill, index) => (
                        <Badge key={index} variant="outline" className="bg-purple-50 text-purple-700 border-purple-200">
                          {skill}
                        </Badge>
                      ))}
                    </div>
                  </div>
                )}
              </div>
            </DialogContent>
          </Dialog>
        </CardContent>
      </Card>
    </>
  );
}
