import React, { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { 
  MapPin, 
  DollarSign, 
  Star,
  ExternalLink,
  Wifi,
  Home,
  BookOpen as BookIcon,
  Utensils,
  Activity,
  Phone,
  Mail,
  Globe,
  Award,
  Users
} from "lucide-react";
import { Separator } from "@/components/ui/separator";

const collegeTypeColors = {
  government: "bg-blue-100 text-blue-800 border-blue-200",
  aided: "bg-green-100 text-green-800 border-green-200",
  deemed: "bg-purple-100 text-purple-800 border-purple-200"
};

const facilityIcons = {
  hostel: Home,
  library: BookIcon,
  labs: Activity,
  internet: Wifi,
  canteen: Utensils,
  sports: Activity
};

export default function CollegeCard({ college, isInUserState }) {
  const [dialogOpen, setDialogOpen] = useState(false);

  const formatFees = (feesRange) => {
    if (!feesRange) return "Not specified";
    const { min, max, currency = "INR" } = feesRange;
    const symbol = currency === "INR" ? "â‚¹" : "$";
    if (min === max) return `${symbol}${min.toLocaleString()}`;
    return `${symbol}${min.toLocaleString()} - ${symbol}${max.toLocaleString()}`;
  };

  const getFacilitiesCount = () => {
    if (!college.facilities) return 0;
    return Object.values(college.facilities).filter(Boolean).length;
  };

  return (
    <>
      <Card className={`hover:shadow-lg transition-all duration-300 ${isInUserState ? 'border-l-4 border-l-green-500' : 'border-l-4 border-l-blue-500'}`}>
        <CardHeader className="pb-3">
          <div className="flex justify-between items-start">
            <div className="space-y-2">
              <CardTitle className="text-xl text-gray-900 line-clamp-2">{college.name}</CardTitle>
              <div className="flex gap-2 flex-wrap">
                <Badge className={`${collegeTypeColors[college.type]} border`}>
                  {college.type.toUpperCase()}
                </Badge>
                {isInUserState && (
                  <Badge className="bg-green-100 text-green-800 border-green-200">
                    Your State
                  </Badge>
                )}
              </div>
            </div>
            <div className="text-right">
              <div className="flex items-center gap-1 text-sm text-gray-600">
                <MapPin className="h-4 w-4" />
                <span>{college.city}, {college.state}</span>
              </div>
            </div>
          </div>
        </CardHeader>
        
        <CardContent className="space-y-4">
          {/* Quick Info */}
          <div className="grid grid-cols-2 gap-4 text-sm">
            <div className="space-y-1">
              <p className="text-gray-600">Annual Fees</p>
              <p className="font-semibold text-green-700">{formatFees(college.fees_range)}</p>
            </div>
            <div className="space-y-1">
              <p className="text-gray-600">Facilities</p>
              <p className="font-semibold">{getFacilitiesCount()} Available</p>
            </div>
          </div>

          {/* Courses Preview */}
          {college.courses_offered && college.courses_offered.length > 0 && (
            <div>
              <p className="text-sm font-medium text-gray-700 mb-2">Courses Offered:</p>
              <div className="flex gap-1 flex-wrap">
                {college.courses_offered.slice(0, 4).map((course, index) => (
                  <Badge key={index} variant="secondary" className="text-xs">
                    {course}
                  </Badge>
                ))}
                {college.courses_offered.length > 4 && (
                  <Badge variant="secondary" className="text-xs">
                    +{college.courses_offered.length - 4} more
                  </Badge>
                )}
              </div>
            </div>
          )}

          {/* Facilities Icons */}
          <div className="flex gap-3">
            {college.facilities && Object.entries(college.facilities).map(([facility, available]) => {
              const Icon = facilityIcons[facility];
              return Icon ? (
                <div key={facility} className={`p-2 rounded-lg ${available ? 'bg-green-100 text-green-600' : 'bg-gray-100 text-gray-400'}`}>
                  <Icon className="h-4 w-4" />
                </div>
              ) : null;
            })}
          </div>

          <Dialog open={dialogOpen} onOpenChange={setDialogOpen}>
            <DialogTrigger asChild>
              <Button className="w-full bg-blue-600 hover:bg-blue-700">
                View College Details
                <ExternalLink className="w-4 h-4 ml-2" />
              </Button>
            </DialogTrigger>
            <DialogContent className="max-w-4xl max-h-[80vh] overflow-y-auto">
              <DialogHeader>
                <DialogTitle className="text-2xl text-blue-800">{college.name}</DialogTitle>
                <div className="flex gap-2 mt-2">
                  <Badge className={`${collegeTypeColors[college.type]} border`}>
                    {college.type.toUpperCase()}
                  </Badge>
                  {isInUserState && (
                    <Badge className="bg-green-100 text-green-800 border-green-200">
                      Your State
                    </Badge>
                  )}
                </div>
              </DialogHeader>
              
              <div className="space-y-6 mt-6">
                {/* Location */}
                <div>
                  <h3 className="text-lg font-semibold mb-3 flex items-center gap-2">
                    <MapPin className="h-5 w-5 text-blue-600" />
                    Location & Contact
                  </h3>
                  <div className="grid md:grid-cols-2 gap-4">
                    <div>
                      <p className="text-gray-700">
                        <span className="font-medium">City:</span> {college.city}
                      </p>
                      <p className="text-gray-700">
                        <span className="font-medium">State:</span> {college.state}
                      </p>
                      {college.district && (
                        <p className="text-gray-700">
                          <span className="font-medium">District:</span> {college.district}
                        </p>
                      )}
                    </div>
                    
                    {college.contact_info && (
                      <div className="space-y-2">
                        {college.contact_info.phone && (
                          <div className="flex items-center gap-2">
                            <Phone className="h-4 w-4 text-gray-500" />
                            <span className="text-sm">{college.contact_info.phone}</span>
                          </div>
                        )}
                        {college.contact_info.email && (
                          <div className="flex items-center gap-2">
                            <Mail className="h-4 w-4 text-gray-500" />
                            <span className="text-sm">{college.contact_info.email}</span>
                          </div>
                        )}
                        {college.contact_info.website && (
                          <div className="flex items-center gap-2">
                            <Globe className="h-4 w-4 text-gray-500" />
                            <a 
                              href={college.contact_info.website} 
                              target="_blank" 
                              rel="noopener noreferrer"
                              className="text-sm text-blue-600 hover:text-blue-800"
                            >
                              Visit Website
                            </a>
                          </div>
                        )}
                      </div>
                    )}
                  </div>
                </div>

                <Separator />

                {/* Fees & Admission */}
                <div className="grid md:grid-cols-2 gap-6">
                  <div>
                    <h4 className="font-semibold text-gray-900 mb-3">Fee Structure</h4>
                    <div className="bg-green-50 border border-green-200 rounded-lg p-3">
                      <p className="text-lg font-bold text-green-700">
                        {formatFees(college.fees_range)}
                      </p>
                      <p className="text-xs text-green-600 mt-1">Per year (approx.)</p>
                    </div>
                  </div>

                  <div>
                    <h4 className="font-semibold text-gray-900 mb-3">Admission Process</h4>
                    <div className="text-sm text-gray-700 bg-blue-50 border border-blue-200 rounded-lg p-3">
                      {college.admission_process || "Contact college for admission details"}
                    </div>
                  </div>
                </div>

                <Separator />

                {/* Courses Offered */}
                {college.courses_offered && college.courses_offered.length > 0 && (
                  <>
                    <div>
                      <h3 className="text-lg font-semibold mb-3 flex items-center gap-2">
                        <BookIcon className="h-5 w-5 text-blue-600" />
                        Courses Offered
                      </h3>
                      <div className="grid md:grid-cols-3 gap-2">
                        {college.courses_offered.map((course, index) => (
                          <div key={index} className="flex items-center gap-2 p-2 bg-gray-50 rounded-lg">
                            <div className="w-2 h-2 bg-blue-600 rounded-full"></div>
                            <span className="text-sm text-gray-700">{course}</span>
                          </div>
                        ))}
                      </div>
                    </div>
                    <Separator />
                  </>
                )}

                {/* Facilities */}
                {college.facilities && (
                  <>
                    <div>
                      <h3 className="text-lg font-semibold mb-3">Campus Facilities</h3>
                      <div className="grid md:grid-cols-2 gap-4">
                        {Object.entries(college.facilities).map(([facility, available]) => {
                          const Icon = facilityIcons[facility];
                          return (
                            <div key={facility} className={`flex items-center gap-3 p-3 rounded-lg border ${
                              available 
                                ? 'bg-green-50 border-green-200 text-green-800' 
                                : 'bg-gray-50 border-gray-200 text-gray-500'
                            }`}>
                              {Icon && <Icon className="h-5 w-5" />}
                              <span className="capitalize font-medium">
                                {facility.replace('_', ' ')}
                              </span>
                              <span className="ml-auto text-sm">
                                {available ? 'Available' : 'Not Available'}
                              </span>
                            </div>
                          );
                        })}
                      </div>
                    </div>
                    <Separator />
                  </>
                )}

                {/* Accreditation */}
                {college.accreditation && (
                  <>
                    <div>
                      <h3 className="text-lg font-semibold mb-3 flex items-center gap-2">
                        <Award className="h-5 w-5 text-blue-600" />
                        Accreditation & Recognition
                      </h3>
                      <p className="text-gray-700 bg-yellow-50 border border-yellow-200 rounded-lg p-3">
                        {college.accreditation}
                      </p>
                    </div>
                    <Separator />
                  </>
                )}

                {/* Virtual Tour */}
                {college.virtual_tour_url && (
                  <div>
                    <h3 className="text-lg font-semibold mb-3">Campus Tour</h3>
                    <a 
                      href={college.virtual_tour_url} 
                      target="_blank" 
                      rel="noopener noreferrer"
                      className="inline-flex items-center gap-2 bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors"
                    >
                      <ExternalLink className="h-4 w-4" />
                      Take Virtual Campus Tour
                    </a>
                  </div>
                )}
              </div>
            </DialogContent>
          </Dialog>
        </CardContent>
      </Card>
    </>
  );
}
